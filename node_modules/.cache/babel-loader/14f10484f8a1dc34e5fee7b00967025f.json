{"ast":null,"code":"import _classCallCheck from \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/src/App.js\";\n\n/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph) DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop. Done\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block).\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      persons: [{\n        name: \"Coolboy55 \",\n        inputContent: ''\n      }],\n      counter: '',\n      showMessage: false\n    };\n\n    _this.tooShortHandler = function () {\n      var doesShow = _this.state.showPersons;\n\n      falseHandler = function falseHandler(showMessage) {\n        _this.setState({\n          showMessage: false\n        });\n      };\n    };\n\n    _this.storeTxtArea = function (event) {\n      var txtAreaCharacterCount = event.target.value.length;\n\n      _this.setState({\n        persons: [{\n          name: \"Coolboy55 \"\n        }, {\n          name: \"Brrrrr \"\n        }, {\n          name: \"we just changed the state of this app when you click the button \"\n        }],\n        counter: txtAreaCharacterCount\n      });\n    };\n\n    _this.switchNameHandler = function () {\n      console.log(' switchNameHandler was clicked!');\n\n      _this.setState({\n        persons: [{\n          name: \"we just changed the state of this app when you click the button  \"\n        }]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          persons = _this$state.persons,\n          counter = _this$state.counter,\n          showMessage = _this$state.showMessage; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.switchNameHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"switch Name Handler\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Hi this is a React App\"), React.createElement(Options, {\n        word: persons[0].name,\n        price: \"$20, a box of pizza and moutian dew\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Text between Options's element tags are called children\"), React.createElement(\"textarea\", {\n        className: \"input\",\n        onChange: this.storeTxtArea,\n        placeholder: \"Insert your thoughts about anything in here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), counter, showMessage ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(ValidationComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/evanlondono/Desktop/Udemy/reactCourse/learnreact/src/App.js"],"names":["React","Component","Options","ValidationComponent","App","state","persons","name","inputContent","counter","showMessage","tooShortHandler","doesShow","showPersons","falseHandler","setState","storeTxtArea","event","txtAreaCharacterCount","target","value","length","switchNameHandler","console","log"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AAoBA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAM;AACJC,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,IAAI,EAAE,YAAR;AACEC,QAAAA,YAAY,EAAE;AADhB,OADO,CADL;AAMHC,MAAAA,OAAO,EAAE,EANN;AAOHC,MAAAA,WAAW,EAAE;AAPV,K;;UAUNC,e,GAAkB,YAAM;AACtB,UAAMC,QAAQ,GAAG,MAAKP,KAAL,CAAWQ,WAA5B;;AACAC,MAAAA,YAAY,GAAG,sBAACJ,WAAD,EAAiB;AAChC,cAAKK,QAAL,CAAc;AAACL,UAAAA,WAAW,EAAE;AAAd,SAAd;AACC,OAFD;AAGD,K;;UAEDM,Y,GAAe,UAACC,KAAD,EAAW;AAAC,UAAMC,qBAAqB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,MAAjD;;AACvB,YAAKN,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE,CAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAF,EAA0B;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAA1B,EAA+C;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAA/C,CAAX;AAAyIE,QAAAA,OAAO,EAAES;AAAlJ,OAAd;AACH,K;;UAEDI,iB,GAAoB,YAAM;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AACA,YAAKT,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE,CAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAF;AAAX,OAAd;AACC,K;;;;;;;6BAEM;AAAA,wBAC+B,KAAKF,KADpC;AAAA,UACAC,OADA,eACAA,OADA;AAAA,UACQG,OADR,eACQA,OADR;AAAA,UACgBC,WADhB,eACgBA,WADhB,EAC2C;;AAClD,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAG;AAAQ,QAAA,OAAO,EAAE,KAAKY,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAH,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,EAGE,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAKhB,OAAO,CAAC,CAAD,CAAP,CAAWC,IAA7B;AAAoC,QAAA,KAAK,EAAG,qCAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAHF,EAIE;AAAU,QAAA,SAAS,EAAC,OAApB;AAA6B,QAAA,QAAQ,EAAE,KAAKS,YAA5C;AAA0D,QAAA,WAAW,EAAC,6CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAMGP,OANH,EAOEC,WAAW,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACd,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc,CAAH,GAEF,IATX,CADF;AAcD;;;;EA3CeT,S;;AA8ClB,eAAeG,GAAf","sourcesContent":["/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph) DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop. Done\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block).\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\n\nclass App extends Component {\n  state={\n    persons: [\n      { name: \"Coolboy55 \",\n        inputContent: ''\n      }\n    ],\n     counter: '',\n     showMessage: false\n  }\n\n  tooShortHandler = () => {\n    const doesShow = this.state.showPersons;\n    falseHandler = (showMessage) => {\n    this.setState({showMessage: false})\n    } \n  }\n  \n  storeTxtArea = (event) => {const txtAreaCharacterCount = event.target.value.length\n      this.setState({ persons: [ { name: \"Coolboy55 \" }, { name: \"Brrrrr \" }, { name: \"we just changed the state of this app when you click the button \" }], counter: txtAreaCharacterCount })\n  };\n\n  switchNameHandler = () => {\n    console.log(' switchNameHandler was clicked!');\n    this.setState({ persons: [ { name: \"we just changed the state of this app when you click the button  \" } ],})\n    };\n\n  render() {\n    const {persons,counter,showMessage} = this.state; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n    return (\n      <div className=\"App\">\n        <p><button onClick={this.switchNameHandler}>switch Name Handler</button></p>\n        <h1>Hi this is a React App</h1>\n        <Options word = { persons[0].name } price = \"$20, a box of pizza and moutian dew\">Text between Options's element tags are called children</Options>\n        <textarea className=\"input\"  onChange={this.storeTxtArea} placeholder=\"Insert your thoughts about anything in here\"></textarea>  \n        <br/>\n        {counter}\n       {showMessage ? <div >\n        <ValidationComponent></ValidationComponent>\n        </div> : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}