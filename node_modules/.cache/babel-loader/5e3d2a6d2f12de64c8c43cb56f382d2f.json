{"ast":null,"code":"import _classCallCheck from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js\";\n\n/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      persons: [{\n        name: 'Coolboy55 ',\n        inputContent: ''\n      }],\n      counter: '',\n      content: null //This function is suppose to loop through the content value in the current state and log each character in the string or array\n\n    };\n\n    _this.renderChars = function () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.content[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var char = _step.value;\n          console.log(char);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    _this.txtAreaValue = function (event) {\n      var txtAreaCharacterCount = event.target.value.length;\n\n      _this.setState({\n        persons: [{\n          name: \"Coolboy55 \"\n        }, {\n          name: \"we just changed the state of this app when you click the button \"\n        }],\n        counter: txtAreaCharacterCount,\n        content: event.target.value\n      });\n    };\n\n    _this.switchNameHandler = function (event) {\n      console.log(' switchNameHandler was clicked!');\n\n      _this.setState({\n        persons: [{\n          name: \"we just changed the state of this app when you click the button  \"\n        }]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          persons = _this$state.persons,\n          counter = _this$state.counter,\n          content = _this$state.content; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n\n      return React.createElement(\"div\", {\n        className: \"App App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.switchNameHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Switch Name Handler\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Hi this is a React App\"), React.createElement(Options, {\n        word: persons[0].name,\n        price: \"$20, a box of pizza and moutian dew\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Text between Options's element tags are called children\"), React.createElement(\"textarea\", {\n        className: \"input\",\n        onChange: this.txtAreaValue,\n        placeholder: \"Insert your thoughts about anything in here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), counter, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(CharComponent, {\n        txt: content,\n        onChange: renderChars,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(ValidationComponent, {\n        count: counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js"],"names":["React","Component","Options","ValidationComponent","CharComponent","App","state","persons","name","inputContent","counter","content","renderChars","char","console","log","txtAreaValue","event","txtAreaCharacterCount","target","value","length","setState","switchNameHandler"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AAoBA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAM;AACJC,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,IAAI,EAAE,YAAR;AACEC,QAAAA,YAAY,EAAE;AADhB,OADO,CADL;AAMJC,MAAAA,OAAO,EAAE,EANL;AAOJC,MAAAA,OAAO,EAAE,IAPL,CASP;;AATO,K;;UAUNC,W,GAAc,YAAM;AAAA;AAAA;AAAA;;AAAA;AAClB,6BAAkB,MAAKN,KAAL,CAAWK,OAA7B;AAAA,cAAUE,IAAV;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AADF;AADkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnB,K;;UAEDG,Y,GAAe,UAACC,KAAD,EAAW;AAAC,UAAMC,qBAAqB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,MAAjD;;AACvB,YAAKC,QAAL,CAAc;AAAEf,QAAAA,OAAO,EAAE,CAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAF,EAA0B;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAA1B,CAAX;AAAoHE,QAAAA,OAAO,EAAEQ,qBAA7H;AAAoJP,QAAAA,OAAO,EAACM,KAAK,CAACE,MAAN,CAAaC;AAAzK,OAAd;AACH,K;;UAEDG,iB,GAAoB,UAACN,KAAD,EAAW;AAC7BH,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AACA,YAAKO,QAAL,CAAc;AAAEf,QAAAA,OAAO,EAAE,CAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAF;AAAX,OAAd;AACC,K;;;;;;;6BAEM;AAAA,wBAC2B,KAAKF,KADhC;AAAA,UACAC,OADA,eACAA,OADA;AAAA,UACQG,OADR,eACQA,OADR;AAAA,UACgBC,OADhB,eACgBA,OADhB,EACuC;;AAC9C,aACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAG;AAAQ,QAAA,OAAO,EAAE,KAAKY,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAH,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,EAGE,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAKhB,OAAO,CAAC,CAAD,CAAP,CAAWC,IAA7B;AAAoC,QAAA,KAAK,EAAG,qCAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAHF,EAIE;AAAU,QAAA,SAAS,EAAC,OAApB;AAA4B,QAAA,QAAQ,EAAE,KAAKQ,YAA3C;AAAyD,QAAA,WAAW,EAAC,6CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAMGN,OANH,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAIC,OAAtB;AAA+B,QAAA,QAAQ,EAAEC,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAPF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,mBAAD;AAAqB,QAAA,KAAK,EAAIF,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAXF,CADF;AAkBD;;;;EA7CeT,S;;AAgDlB,eAAeI,GAAf","sourcesContent":["/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\nclass App extends Component { \n  state={\n    persons: [\n      { name: 'Coolboy55 ',\n        inputContent: '',\n      }\n    ],\n    counter: '',\n    content: null\n  }\n //This function is suppose to loop through the content value in the current state and log each character in the string or array\n  renderChars = () => {\n    for(const char of this.state.content)\n      console.log(char);\n  };\n\n  txtAreaValue = (event) => {const txtAreaCharacterCount = event.target.value.length\n      this.setState({ persons: [ { name: \"Coolboy55 \" }, { name: \"we just changed the state of this app when you click the button \" }], counter: txtAreaCharacterCount, content:event.target.value} )\n  };\n\n  switchNameHandler = (event) => {\n    console.log(' switchNameHandler was clicked!');\n    this.setState({ persons: [ { name: \"we just changed the state of this app when you click the button  \" } ],})\n    };\n\n  render() {\n    const {persons,counter,content} = this.state; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n    return (\n      <div className=\"App App-header\">\n        <p><button onClick={this.switchNameHandler}>Switch Name Handler</button></p>\n        <h1>Hi this is a React App</h1>\n        <Options word = { persons[0].name } price = \"$20, a box of pizza and moutian dew\">Text between Options's element tags are called children</Options>\n        <textarea className=\"input\" onChange={this.txtAreaValue} placeholder=\"Insert your thoughts about anything in here\"></textarea>  \n        <br/>\n        {counter}\n        <ul>\n        <CharComponent txt = {content} onChange={renderChars}></CharComponent>\n        </ul>\n        \n        <div >\n        <ValidationComponent count = {counter}></ValidationComponent>\n        </div> \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}