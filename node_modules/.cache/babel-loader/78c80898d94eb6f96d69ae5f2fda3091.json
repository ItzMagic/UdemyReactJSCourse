{"ast":null,"code":"import _classCallCheck from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js\";\n\n/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      persons: [{\n        name: ' Coolboy55 '\n      }, {\n        name: ' ThatGuy '\n      }, {\n        name: ' Troll '\n      }, {\n        name: 'Coolboy55 '\n      }],\n      counter: '',\n      content: '',\n      // this.state.content can't be null since we are using 0 in the ternary function in the render porition\n      arrayOfCharactersOfTheContentString: []\n    };\n\n    _this.deleteCharacterHandler = function (index) {};\n\n    _this.txtAreaValue = function (event) {\n      var txtAreaCharacterCount = event.target.value.length;\n\n      _this.setState({\n        persons: [{\n          name: \"Coolboy55 \"\n        }],\n        counter: txtAreaCharacterCount,\n        content: event.target.value,\n        arrayOfCharactersOfTheContentString: event.target.value.split('')\n      });\n    };\n\n    _this.switchNameHandler = function () {\n      console.log(' switchNameHandler was clicked!');\n\n      _this.setState({\n        persons: [{\n          name: \"we just changed the state of this app when you click the button  \"\n        }]\n      });\n\n      _this.renderEachCharacterInArray();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // Javascript must be placed here BEFORE THE RETURN\n      character = {\n        char: char\n      };\n      key = {\n        index: index\n      };\n      clicked = {};\n      var charList = this.state.arrayOfCharactersOfTheContentString.map(function (char) {\n        return React.createElement(CharComponent, {\n          character: char,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      });\n      var _this$state = this.state,\n          persons = _this$state.persons,\n          counter = _this$state.counter; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n\n      return React.createElement(\"div\", {\n        className: \"App App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.switchNameHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Switch Name Handler\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Hi this is a React App\"), React.createElement(Options, {\n        word: persons[0].name,\n        price: \"$20, a box of pizza and moutian dew\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Text between Options's element tags are called children\"), React.createElement(\"textarea\", {\n        type: \"value\",\n        className: \"input\",\n        onChange: this.txtAreaValue,\n        placeholder: \"Insert your thoughts about anything here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), counter, this.state.content.length > 0 ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(CharComponent, {\n        list: this.arrayOfCharactersOfTheContentString,\n        callBack: this.renderEachCharacterInArray,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }))) : null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(ValidationComponent, {\n        count: counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), charList);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js"],"names":["React","Component","Options","ValidationComponent","CharComponent","App","state","persons","name","counter","content","arrayOfCharactersOfTheContentString","deleteCharacterHandler","index","txtAreaValue","event","txtAreaCharacterCount","target","value","length","setState","split","switchNameHandler","console","log","renderEachCharacterInArray","character","char","key","clicked","charList","map"],"mappings":"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","sourcesContent":["/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\n\nclass App extends Component { \n  state={\n    persons: [\n      { name: ' Coolboy55 '},\n      { name: ' ThatGuy '},\n      { name: ' Troll '},\n      { name: 'Coolboy55 '}\n    ],\n    counter: '',\n    content: '', // this.state.content can't be null since we are using 0 in the ternary function in the render porition\n    arrayOfCharactersOfTheContentString: []\n    \n  };\n  deleteCharacterHandler = ( index ) => {\n\n  }\n\n  txtAreaValue = (event) => {const txtAreaCharacterCount = event.target.value.length\n      this.setState({ persons: [ { name: \"Coolboy55 \" } ], counter: txtAreaCharacterCount, content: event.target.value,\n      arrayOfCharactersOfTheContentString: event.target.value.split('')  } )\n  };\n\n  switchNameHandler = () => {\n    console.log(' switchNameHandler was clicked!');\n    this.setState({ persons: [ { name: \"we just changed the state of this app when you click the button  \" } ],});\n    this.renderEachCharacterInArray();\n    };\n\n  render() {\n    // Javascript must be placed here BEFORE THE RETURN\n\n    character = {char}\n    key = {index}\n    clicked = {}\n    const charList = this.state.arrayOfCharactersOfTheContentString.map(char =>{\n      return <CharComponent character = {char}/>;})\n\n    const { persons,counter } = this.state; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n\n    return (\n      <div className=\"App App-header\">\n        <p><button onClick={this.switchNameHandler}>Switch Name Handler</button></p>\n        <h1>Hi this is a React App</h1>\n        <Options word = { persons[0].name } price = \"$20, a box of pizza and moutian dew\">Text between Options's element tags are called children</Options>\n        <textarea type=\"value\" className=\"input\" onChange= { this.txtAreaValue } placeholder=\"Insert your thoughts about anything here\"></textarea>  \n        \n        <br/>\n\n        {counter}\n        \n        { \n          this.state.content.length > 0 ? \n            <div>\n              <ul>\n              <CharComponent list= { this.arrayOfCharactersOfTheContentString } callBack = {this.renderEachCharacterInArray} />\n              </ul>\n            </div> : null\n        }\n\n        <div>\n          <ValidationComponent count = { counter }></ValidationComponent>\n        </div> \n        \n          {charList}\n        \n      \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}