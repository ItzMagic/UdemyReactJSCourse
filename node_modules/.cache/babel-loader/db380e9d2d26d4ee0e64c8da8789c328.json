{"ast":null,"code":"import _classCallCheck from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evanlondono/Desktop/UdemyReactJSCourse/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js\";\n\n/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      persons: [{\n        name: 'Coolboy55 ',\n        inputContent: ''\n      }],\n      counter: '',\n      content: '',\n      // can't be null since we are using 0 in the ternary function in the render porition\n      arrayOfCharactersOfTheContentString: []\n    };\n\n    _this.characterRender = function (event) {\n      var valueOfCurrentStateConntent = _this.state.content.map;\n\n      for (var i = 0; i < valueOfCurrentStateConntent.length; i++) {\n        console.log(_this.content.charAt(i));\n        valueOfCurrentStateConntent.push(_this.setState.arrayOfCharactersOfTheContentString);\n      }\n    };\n\n    _this.txtAreaValue = function (event) {\n      var txtAreaCharacterCount = event.target.value.length;\n\n      _this.setState({\n        persons: [{\n          name: \"Coolboy55 \"\n        }, {\n          name: \"we just changed the state of this app when you clicked the button \"\n        }],\n        counter: txtAreaCharacterCount,\n        content: event.target.value,\n        arrayOfCharactersOfTheContentString: event.target.value\n      });\n    };\n\n    _this.switchNameHandler = function () {\n      console.log(' switchNameHandler was clicked!');\n\n      _this.setState({\n        persons: [{\n          name: \"we just changed the state of this app when you click the button  \"\n        }]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          persons = _this$state.persons,\n          counter = _this$state.counter,\n          content = _this$state.content; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n\n      return React.createElement(\"div\", {\n        className: \"App App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.switchNameHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Switch Name Handler\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Hi this is a React App\"), React.createElement(Options, {\n        word: persons[0].name,\n        price: \"$20, a box of pizza and moutian dew\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Text between Options's element tags are called children\"), React.createElement(\"textarea\", {\n        type: \"value\",\n        className: \"input\",\n        onChange: this.txtAreaValue,\n        placeholder: \"Insert your thoughts about anything here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), counter, this.state.content.length > 0 ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(CharComponent, {\n        characters: content.map,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }))) : null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(ValidationComponent, {\n        count: counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/evanlondono/Desktop/UdemyReactJSCourse/src/App.js"],"names":["React","Component","Options","ValidationComponent","CharComponent","App","state","persons","name","inputContent","counter","content","arrayOfCharactersOfTheContentString","characterRender","event","valueOfCurrentStateConntent","map","i","length","console","log","charAt","push","setState","txtAreaValue","txtAreaCharacterCount","target","value","switchNameHandler"],"mappings":"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","sourcesContent":["/*\n\n1. Create an input field (in App component) with a change listener which outputs the length of the entered text \nbelow it (e.g. in a paragraph)    DONE\n\n2. Create a new component (=> ValidationComponent) which receives the text length as a prop.    DONE\n\n3.Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough \" depending on the text\nlength (e.g. take 5 as minimum length)     DONE\n\n4. Create another component (=> CharComponent) and style it as an inline box (=>display: inline-block,\n   padding: 16px, text-align: center, margin: 16px,border: 1px solid block). DONE\n   \n5. Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in\n  the initial input field) as a prop.\n\n6. When you click a CharComponent, it should be remvoed from the entered text.\n\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Options from './Options/Options';\nimport ValidationComponent from './ValidationComponent/ValidationCompontent';\nimport CharComponent from './CharComponent/CharComponent';\n\n\nclass App extends Component { \n  state={\n    persons: [\n      { name: 'Coolboy55 ',\n        inputContent: '',\n      }\n    ],\n    \n    counter: '',\n    content: '', // can't be null since we are using 0 in the ternary function in the render porition\n    arrayOfCharactersOfTheContentString:[]\n  };\n\n  characterRender =  (event) => {\n    let valueOfCurrentStateConntent = this.state.content.map;\n    for (var i = 0; i < valueOfCurrentStateConntent.length; i++) {\n        console.log(this.content.charAt(i));\n        valueOfCurrentStateConntent.push(this.setState.arrayOfCharactersOfTheContentString)\n    }\n    };\n  \n\n  txtAreaValue = (event) => {const txtAreaCharacterCount = event.target.value.length\n      this.setState({ persons: [ { name: \"Coolboy55 \" }, { name: \"we just changed the state of this app when you clicked the button \" }], counter: txtAreaCharacterCount, content: event.target.value, arrayOfCharactersOfTheContentString: event.target.value,} )\n  };\n\n  switchNameHandler = () => {\n    console.log(' switchNameHandler was clicked!');\n    this.setState({ persons: [ { name: \"we just changed the state of this app when you click the button  \" } ],})\n    };\n\n  render() {\n    const {persons,counter,content} = this.state; // get in the habbit of doing this here so you don't have to write for ex: this.state.persons\n    return (\n      <div className=\"App App-header\">\n        <p><button onClick={this.switchNameHandler}>Switch Name Handler</button></p>\n        <h1>Hi this is a React App</h1>\n        <Options word = { persons[0].name } price = \"$20, a box of pizza and moutian dew\">Text between Options's element tags are called children</Options>\n        <textarea type=\"value\" className=\"input\" onChange={this.txtAreaValue} placeholder=\"Insert your thoughts about anything here\"></textarea>  \n        \n        <br/>\n\n        {counter}\n\n        { this.state.content.length > 0 ?\n            <div>\n              <ul>\n              <CharComponent characters = {content.map}></CharComponent>\n              </ul>\n            </div> : null\n        }\n\n        <div>\n          <ValidationComponent count = {counter}></ValidationComponent>\n        </div> \n      \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}